{"ast":null,"code":"import React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[sales,setSales]=useState([]);const[predictedSales,setPredictedSales]=useState([]);useEffect(()=>{// Fetch sales data from the backend\nfetch('http://localhost:3001/api/sales').then(response=>response.json()).then(data=>{setSales(data);calculateForecast(data);// Call the function to calculate the forecast\n});},[]);// Function to calculate the moving average forecast\nconst calculateForecast=data=>{const forecastDays=3;// We will forecast for the next 3 days\nlet totalSales=0;// Get the last 3 days of sales data\nconst lastThreeDays=data.slice(-3);// Slicing the last 3 sales entries\nlastThreeDays.forEach(day=>{totalSales+=day.sales;// Summing the sales of the last 3 days\n});const avgSales=totalSales/lastThreeDays.length;// Calculating the moving average\n// Create predicted sales for the next forecastDays\nconst futureSales=[];for(let i=1;i<=forecastDays;i++){futureSales.push({date:`2024-09-0${data.length+i}`,// Dummy future dates (you can adjust this)\nsales:avgSales});}setPredictedSales(futureSales);// Set the predicted sales state\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Sales Data & Forecast\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:400,children:/*#__PURE__*/_jsxs(LineChart,{data:[...sales,...predictedSales],children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"sales\",stroke:\"#8884d8\",activeDot:{r:8}})]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsx","_jsx","jsxs","_jsxs","App","sales","setSales","predictedSales","setPredictedSales","fetch","then","response","json","data","calculateForecast","forecastDays","totalSales","lastThreeDays","slice","forEach","day","avgSales","length","futureSales","i","push","date","className","children","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r"],"sources":["/Users/josephlangley/inventory-forecasting/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nfunction App() {\n  const [sales, setSales] = useState([]);\n  const [predictedSales, setPredictedSales] = useState([]);\n\n  useEffect(() => {\n    // Fetch sales data from the backend\n    fetch('http://localhost:3001/api/sales')\n      .then((response) => response.json())\n      .then((data) => {\n        setSales(data);\n        calculateForecast(data); // Call the function to calculate the forecast\n      });\n  }, []);\n\n  // Function to calculate the moving average forecast\n  const calculateForecast = (data) => {\n    const forecastDays = 3; // We will forecast for the next 3 days\n    let totalSales = 0;\n\n    // Get the last 3 days of sales data\n    const lastThreeDays = data.slice(-3); // Slicing the last 3 sales entries\n    lastThreeDays.forEach((day) => {\n      totalSales += day.sales; // Summing the sales of the last 3 days\n    });\n\n    const avgSales = totalSales / lastThreeDays.length; // Calculating the moving average\n\n    // Create predicted sales for the next forecastDays\n    const futureSales = [];\n    for (let i = 1; i <= forecastDays; i++) {\n      futureSales.push({\n        date: `2024-09-0${data.length + i}`, // Dummy future dates (you can adjust this)\n        sales: avgSales,\n      });\n    }\n\n    setPredictedSales(futureSales); // Set the predicted sales state\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Sales Data & Forecast</h1>\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart data={[...sales, ...predictedSales]}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"sales\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,SAAS,CAAEC,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,aAAa,CAAEC,OAAO,CAAEC,MAAM,CAAEC,mBAAmB,KAAQ,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE9G,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACiB,cAAc,CAAEC,iBAAiB,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAExDC,SAAS,CAAC,IAAM,CACd;AACAkB,KAAK,CAAC,iCAAiC,CAAC,CACrCC,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,EAAK,CACdP,QAAQ,CAACO,IAAI,CAAC,CACdC,iBAAiB,CAACD,IAAI,CAAC,CAAE;AAC3B,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAC,iBAAiB,CAAID,IAAI,EAAK,CAClC,KAAM,CAAAE,YAAY,CAAG,CAAC,CAAE;AACxB,GAAI,CAAAC,UAAU,CAAG,CAAC,CAElB;AACA,KAAM,CAAAC,aAAa,CAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;AACtCD,aAAa,CAACE,OAAO,CAAEC,GAAG,EAAK,CAC7BJ,UAAU,EAAII,GAAG,CAACf,KAAK,CAAE;AAC3B,CAAC,CAAC,CAEF,KAAM,CAAAgB,QAAQ,CAAGL,UAAU,CAAGC,aAAa,CAACK,MAAM,CAAE;AAEpD;AACA,KAAM,CAAAC,WAAW,CAAG,EAAE,CACtB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIT,YAAY,CAAES,CAAC,EAAE,CAAE,CACtCD,WAAW,CAACE,IAAI,CAAC,CACfC,IAAI,CAAE,YAAYb,IAAI,CAACS,MAAM,CAAGE,CAAC,EAAE,CAAE;AACrCnB,KAAK,CAAEgB,QACT,CAAC,CAAC,CACJ,CAEAb,iBAAiB,CAACe,WAAW,CAAC,CAAE;AAClC,CAAC,CAED,mBACEpB,KAAA,QAAKwB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClB3B,IAAA,OAAA2B,QAAA,CAAI,uBAAqB,CAAI,CAAC,cAC9B3B,IAAA,CAACF,mBAAmB,EAAC8B,KAAK,CAAC,MAAM,CAACC,MAAM,CAAE,GAAI,CAAAF,QAAA,cAC5CzB,KAAA,CAACX,SAAS,EAACqB,IAAI,CAAE,CAAC,GAAGR,KAAK,CAAE,GAAGE,cAAc,CAAE,CAAAqB,QAAA,eAC7C3B,IAAA,CAACL,aAAa,EAACmC,eAAe,CAAC,KAAK,CAAE,CAAC,cACvC9B,IAAA,CAACP,KAAK,EAACsC,OAAO,CAAC,MAAM,CAAE,CAAC,cACxB/B,IAAA,CAACN,KAAK,GAAE,CAAC,cACTM,IAAA,CAACJ,OAAO,GAAE,CAAC,cACXI,IAAA,CAACH,MAAM,GAAE,CAAC,cACVG,IAAA,CAACR,IAAI,EAACwC,IAAI,CAAC,UAAU,CAACD,OAAO,CAAC,OAAO,CAACE,MAAM,CAAC,SAAS,CAACC,SAAS,CAAE,CAAEC,CAAC,CAAE,CAAE,CAAE,CAAE,CAAC,EACrE,CAAC,CACO,CAAC,EACnB,CAAC,CAEV,CAEA,cAAe,CAAAhC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}