{"ast":null,"code":"var _jsxFileName = \"/Users/josephlangley/inventory-forecasting/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sales, setSales] = useState([]);\n  const [predictedSales, setPredictedSales] = useState([]);\n  useEffect(() => {\n    // Fetch sales data from the backend\n    fetch('http://localhost:3001/api/sales').then(response => response.json()).then(data => {\n      setSales(data);\n      calculateForecast(data); // Call the function to calculate the forecast\n    });\n  }, []);\n\n  // Function to calculate the moving average forecast\n  const calculateForecast = data => {\n    const forecastDays = 3; // We will forecast for the next 3 days\n    let totalSales = 0;\n\n    // Get the last 3 days of sales data\n    const lastThreeDays = data.slice(-3); // Slicing the last 3 sales entries\n    lastThreeDays.forEach(day => {\n      totalSales += day.sales; // Summing the sales of the last 3 days\n    });\n    const avgSales = totalSales / lastThreeDays.length; // Calculating the moving average\n\n    // Create predicted sales for the next forecastDays\n    const futureSales = [];\n    for (let i = 1; i <= forecastDays; i++) {\n      futureSales.push({\n        date: `2024-09-0${data.length + i}`,\n        // Dummy future dates (you can adjust this)\n        sales: avgSales\n      });\n    }\n    setPredictedSales(futureSales); // Set the predicted sales state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sales Data & Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: [...sales, ...predictedSales],\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"sales\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5pBiYmESNYd9P+UvHFDh3E33AQg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","App","_s","sales","setSales","predictedSales","setPredictedSales","fetch","then","response","json","data","calculateForecast","forecastDays","totalSales","lastThreeDays","slice","forEach","day","avgSales","length","futureSales","i","push","date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/josephlangley/inventory-forecasting/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nfunction App() {\n  const [sales, setSales] = useState([]);\n  const [predictedSales, setPredictedSales] = useState([]);\n\n  useEffect(() => {\n    // Fetch sales data from the backend\n    fetch('http://localhost:3001/api/sales')\n      .then((response) => response.json())\n      .then((data) => {\n        setSales(data);\n        calculateForecast(data); // Call the function to calculate the forecast\n      });\n  }, []);\n\n  // Function to calculate the moving average forecast\n  const calculateForecast = (data) => {\n    const forecastDays = 3; // We will forecast for the next 3 days\n    let totalSales = 0;\n\n    // Get the last 3 days of sales data\n    const lastThreeDays = data.slice(-3); // Slicing the last 3 sales entries\n    lastThreeDays.forEach((day) => {\n      totalSales += day.sales; // Summing the sales of the last 3 days\n    });\n\n    const avgSales = totalSales / lastThreeDays.length; // Calculating the moving average\n\n    // Create predicted sales for the next forecastDays\n    const futureSales = [];\n    for (let i = 1; i <= forecastDays; i++) {\n      futureSales.push({\n        date: `2024-09-0${data.length + i}`, // Dummy future dates (you can adjust this)\n        sales: avgSales,\n      });\n    }\n\n    setPredictedSales(futureSales); // Set the predicted sales state\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Sales Data & Forecast</h1>\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart data={[...sales, ...predictedSales]}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"sales\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}